{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport React, { useState } from \"react\";\nimport Task from \"./components/Task\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function App() {\n  var _useState = useState(),\n    _useState2 = _slicedToArray(_useState, 2),\n    task = _useState2[0],\n    setTask = _useState2[1];\n  var _useState3 = useState([]),\n    _useState4 = _slicedToArray(_useState3, 2),\n    taskItems = _useState4[0],\n    setTaskItems = _useState4[1];\n  var handleAddTask = function handleAddTask() {\n    Keyboard.dismiss();\n    setTaskItems([].concat(_toConsumableArray(taskItems), [task]));\n    setTask(null);\n  };\n  var completeTask = function completeTask(index) {\n    var itemsCopy = _toConsumableArray(taskItems);\n    itemsCopy.splice(index, 1);\n    setTaskItems(itemsCopy);\n  };\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsxs(View, {\n      style: styles.tasksWrapper,\n      children: [_jsx(Text, {\n        style: styles.sectionTitle,\n        children: \"My Todo Items\"\n      }), _jsx(View, {\n        style: styles.items,\n        children: taskItems.map(function (item, index) {\n          return _jsx(TouchableOpacity, {\n            onPress: function onPress() {\n              return completeTask(index);\n            },\n            children: _jsx(Task, {\n              text: item\n            })\n          }, index);\n        })\n      })]\n    }), _jsxs(KeyboardAvoidingView, {\n      behavior: Platform.OS === \"ios\" ? \"padding\" : \"height\",\n      style: writeTaskWrapper,\n      children: [_jsx(TextInput, {\n        style: styles.input,\n        placeholder: \"Add todo items\",\n        value: task,\n        onChangeText: function onChangeText(text) {\n          return setTask(text);\n        }\n      }), _jsx(TouchableOpacity, {\n        onPress: function onPress() {\n          return handleAddTask();\n        },\n        children: _jsx(View, {\n          style: styles.addWrapper,\n          children: _jsx(Text, {\n            style: styles.addText,\n            children: \"+\"\n          })\n        })\n      })]\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#E8EAED\"\n  },\n  tasksWrapper: {\n    paddingTop: 80,\n    paddingHorizontal: 20\n  },\n  sectionTitle: {\n    fontSize: 24,\n    fontWeight: \"bold\"\n  },\n  items: {\n    marginTop: 30\n  },\n  writeTaskWrapper: {\n    position: \"absolute\",\n    bottom: 60,\n    width: \"100%\",\n    flexDirection: \"row\",\n    justifyContent: \"space-around\",\n    alignItems: \"center\"\n  },\n  input: {\n    paddingVertical: 15,\n    paddingHorizontal: 15,\n    backgroundColor: \"#FFF\",\n    borderRadius: 60,\n    borderColor: \"#C0C0C0\",\n    borderWidth: 1,\n    width: 250\n  },\n  addWrapper: {\n    width: 60,\n    height: 60,\n    backgroundColor: \"#FFF\",\n    borderRadius: 60,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    borderColor: \"#C0C0C0\",\n    borderWidth: 1\n  },\n  addText: {}\n});","map":{"version":3,"names":["React","useState","Task","jsx","_jsx","jsxs","_jsxs","App","_useState","_useState2","_slicedToArray","task","setTask","_useState3","_useState4","taskItems","setTaskItems","handleAddTask","Keyboard","dismiss","concat","_toConsumableArray","completeTask","index","itemsCopy","splice","View","style","styles","container","children","tasksWrapper","Text","sectionTitle","items","map","item","TouchableOpacity","onPress","text","KeyboardAvoidingView","behavior","Platform","OS","writeTaskWrapper","TextInput","input","placeholder","value","onChangeText","addWrapper","addText","StyleSheet","create","flex","backgroundColor","paddingTop","paddingHorizontal","fontSize","fontWeight","marginTop","position","bottom","width","flexDirection","justifyContent","alignItems","paddingVertical","borderRadius","borderColor","borderWidth","height"],"sources":["C:/Users/Jordan Leich/Documents/GitHub/RN-MyToDOApp/App.js"],"sourcesContent":["import {\r\n  Keyboard,\r\n  KeyboardAvoidingView,\r\n  Platform,\r\n  StyleSheet,\r\n  Text,\r\n  TextInput,\r\n  TouchableOpacity,\r\n  View,\r\n} from \"react-native\";\r\n\r\n// import for state management\r\nimport React, { useState } from \"react\";\r\n\r\n// import components\r\nimport Task from \"./components/Task\";\r\n\r\nexport default function App() {\r\n  // State management for recieving the task input from users from the UI\r\n  const [task, setTask] = useState();\r\n\r\n  // state to persistently store the tasks  in an array that user adds to the app\r\n  const [taskItems, setTaskItems] = useState([]);\r\n\r\n  // create logic for event handler function body of TouchableOpacity component\r\n  const handleAddTask = () => {\r\n    // test event handler is working\r\n    // console.log(task);\r\n\r\n    // Once the event is over hide the keyboard\r\n    Keyboard.dismiss();\r\n    // append new task to array\r\n    setTaskItems([...taskItems, task]);\r\n    // reset the input area of the UI once task is added.\r\n    setTask(null);\r\n  };\r\n\r\n  // create event logic to delete a task through another touchable opacity component\r\n  const completeTask = (index) => {\r\n    let itemsCopy = [...taskItems];\r\n    // remove item identified by index as clicked by user\r\n    itemsCopy.splice(index, 1);\r\n    // update state\r\n    setTaskItems(itemsCopy);\r\n  };\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      {/* List of todo items */}\r\n      <View style={styles.tasksWrapper}>\r\n        <Text style={styles.sectionTitle}>My Todo Items</Text>\r\n\r\n        {/* Container to show all todo items */}\r\n        <View style={styles.items}>\r\n          {/* render your task components below - create a resuable component in components sub-directory  */}\r\n          {/* Test that props passing is working */}\r\n          {/* <Task text={\"This is task 1\"} />\r\n          <Task text={\"This is task 2\"} /> */}\r\n\r\n          {/* Iterate over the taskItems array state which stores all the tasks and pass it as props to Task component */}\r\n          {taskItems.map((item, index) => {\r\n            return (\r\n              <TouchableOpacity key={index} onPress={() => completeTask(index)}>\r\n                <Task text={item} />\r\n              </TouchableOpacity>\r\n            );\r\n          })}\r\n        </View>\r\n      </View>\r\n\r\n      {/* create UI section for users to add tasks */}\r\n      {/* app will shrink to accomodate the phone's keyboard popping up using the following parent component */}\r\n      <KeyboardAvoidingView\r\n        behavior={Platform.OS === \"ios\" ? \"padding\" : \"height\"}\r\n        style={writeTaskWrapper}\r\n      >\r\n        {/* UI text input for user to type into */}\r\n        <TextInput\r\n          style={styles.input}\r\n          placeholder={\"Add todo items\"}\r\n          value={task}\r\n          onChangeText={(text) => setTask(text)}\r\n        />\r\n\r\n        {/* A touch screen feedback btn to add a new tasks to the state */}\r\n        <TouchableOpacity onPress={() => handleAddTask()}>\r\n          <View style={styles.addWrapper}>\r\n            {/* add your icon or build your own */}\r\n            <Text style={styles.addText}>+</Text>\r\n          </View>\r\n        </TouchableOpacity>\r\n      </KeyboardAvoidingView>\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: \"#E8EAED\",\r\n  },\r\n  tasksWrapper: {\r\n    paddingTop: 80,\r\n    paddingHorizontal: 20,\r\n  },\r\n  sectionTitle: {\r\n    fontSize: 24,\r\n    fontWeight: \"bold\",\r\n  },\r\n  items: {\r\n    marginTop: 30,\r\n  },\r\n  writeTaskWrapper: {\r\n    // allows us with postion absolute to place this item anywhere on the screen UI\r\n    position: \"absolute\",\r\n    bottom: 60,\r\n    width: \"100%\",\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-around\",\r\n    alignItems: \"center\",\r\n  },\r\n  input: {\r\n    paddingVertical: 15,\r\n    paddingHorizontal: 15,\r\n    backgroundColor: \"#FFF\",\r\n    borderRadius: 60,\r\n    borderColor: \"#C0C0C0\",\r\n    borderWidth: 1,\r\n    width: 250,\r\n  },\r\n  addWrapper: {\r\n    width: 60,\r\n    height: 60,\r\n    backgroundColor: \"#FFF\",\r\n    borderRadius: 60,\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    borderColor: \"#C0C0C0\",\r\n    borderWidth: 1,\r\n  },\r\n  addText: {},\r\n});\r\n"],"mappings":";;;;;;;;;;AAYA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAGvC,OAAOC,IAAI;AAA0B,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAErC,eAAe,SAASC,GAAGA,CAAA,EAAG;EAE5B,IAAAC,SAAA,GAAwBP,QAAQ,CAAC,CAAC;IAAAQ,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAA3BG,IAAI,GAAAF,UAAA;IAAEG,OAAO,GAAAH,UAAA;EAGpB,IAAAI,UAAA,GAAkCZ,QAAQ,CAAC,EAAE,CAAC;IAAAa,UAAA,GAAAJ,cAAA,CAAAG,UAAA;IAAvCE,SAAS,GAAAD,UAAA;IAAEE,YAAY,GAAAF,UAAA;EAG9B,IAAMG,aAAa,GAAG,SAAhBA,aAAaA,CAAA,EAAS;IAK1BC,QAAQ,CAACC,OAAO,CAAC,CAAC;IAElBH,YAAY,IAAAI,MAAA,CAAAC,kBAAA,CAAKN,SAAS,IAAEJ,IAAI,EAAC,CAAC;IAElCC,OAAO,CAAC,IAAI,CAAC;EACf,CAAC;EAGD,IAAMU,YAAY,GAAG,SAAfA,YAAYA,CAAIC,KAAK,EAAK;IAC9B,IAAIC,SAAS,GAAAH,kBAAA,CAAON,SAAS,CAAC;IAE9BS,SAAS,CAACC,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC;IAE1BP,YAAY,CAACQ,SAAS,CAAC;EACzB,CAAC;EAED,OACElB,KAAA,CAACoB,IAAI;IAACC,KAAK,EAAEC,MAAM,CAACC,SAAU;IAAAC,QAAA,GAE5BxB,KAAA,CAACoB,IAAI;MAACC,KAAK,EAAEC,MAAM,CAACG,YAAa;MAAAD,QAAA,GAC/B1B,IAAA,CAAC4B,IAAI;QAACL,KAAK,EAAEC,MAAM,CAACK,YAAa;QAAAH,QAAA,EAAC;MAAa,CAAM,CAAC,EAGtD1B,IAAA,CAACsB,IAAI;QAACC,KAAK,EAAEC,MAAM,CAACM,KAAM;QAAAJ,QAAA,EAOvBf,SAAS,CAACoB,GAAG,CAAC,UAACC,IAAI,EAAEb,KAAK,EAAK;UAC9B,OACEnB,IAAA,CAACiC,gBAAgB;YAAaC,OAAO,EAAE,SAAAA,QAAA;cAAA,OAAMhB,YAAY,CAACC,KAAK,CAAC;YAAA,CAAC;YAAAO,QAAA,EAC/D1B,IAAA,CAACF,IAAI;cAACqC,IAAI,EAAEH;YAAK,CAAE;UAAC,GADCb,KAEL,CAAC;QAEvB,CAAC;MAAC,CACE,CAAC;IAAA,CACH,CAAC,EAIPjB,KAAA,CAACkC,oBAAoB;MACnBC,QAAQ,EAAEC,QAAQ,CAACC,EAAE,KAAK,KAAK,GAAG,SAAS,GAAG,QAAS;MACvDhB,KAAK,EAAEiB,gBAAiB;MAAAd,QAAA,GAGxB1B,IAAA,CAACyC,SAAS;QACRlB,KAAK,EAAEC,MAAM,CAACkB,KAAM;QACpBC,WAAW,EAAE,gBAAiB;QAC9BC,KAAK,EAAErC,IAAK;QACZsC,YAAY,EAAE,SAAAA,aAACV,IAAI;UAAA,OAAK3B,OAAO,CAAC2B,IAAI,CAAC;QAAA;MAAC,CACvC,CAAC,EAGFnC,IAAA,CAACiC,gBAAgB;QAACC,OAAO,EAAE,SAAAA,QAAA;UAAA,OAAMrB,aAAa,CAAC,CAAC;QAAA,CAAC;QAAAa,QAAA,EAC/C1B,IAAA,CAACsB,IAAI;UAACC,KAAK,EAAEC,MAAM,CAACsB,UAAW;UAAApB,QAAA,EAE7B1B,IAAA,CAAC4B,IAAI;YAACL,KAAK,EAAEC,MAAM,CAACuB,OAAQ;YAAArB,QAAA,EAAC;UAAC,CAAM;QAAC,CACjC;MAAC,CACS,CAAC;IAAA,CACC,CAAC;EAAA,CACnB,CAAC;AAEX;AAEA,IAAMF,MAAM,GAAGwB,UAAU,CAACC,MAAM,CAAC;EAC/BxB,SAAS,EAAE;IACTyB,IAAI,EAAE,CAAC;IACPC,eAAe,EAAE;EACnB,CAAC;EACDxB,YAAY,EAAE;IACZyB,UAAU,EAAE,EAAE;IACdC,iBAAiB,EAAE;EACrB,CAAC;EACDxB,YAAY,EAAE;IACZyB,QAAQ,EAAE,EAAE;IACZC,UAAU,EAAE;EACd,CAAC;EACDzB,KAAK,EAAE;IACL0B,SAAS,EAAE;EACb,CAAC;EACDhB,gBAAgB,EAAE;IAEhBiB,QAAQ,EAAE,UAAU;IACpBC,MAAM,EAAE,EAAE;IACVC,KAAK,EAAE,MAAM;IACbC,aAAa,EAAE,KAAK;IACpBC,cAAc,EAAE,cAAc;IAC9BC,UAAU,EAAE;EACd,CAAC;EACDpB,KAAK,EAAE;IACLqB,eAAe,EAAE,EAAE;IACnBV,iBAAiB,EAAE,EAAE;IACrBF,eAAe,EAAE,MAAM;IACvBa,YAAY,EAAE,EAAE;IAChBC,WAAW,EAAE,SAAS;IACtBC,WAAW,EAAE,CAAC;IACdP,KAAK,EAAE;EACT,CAAC;EACDb,UAAU,EAAE;IACVa,KAAK,EAAE,EAAE;IACTQ,MAAM,EAAE,EAAE;IACVhB,eAAe,EAAE,MAAM;IACvBa,YAAY,EAAE,EAAE;IAChBH,cAAc,EAAE,QAAQ;IACxBC,UAAU,EAAE,QAAQ;IACpBG,WAAW,EAAE,SAAS;IACtBC,WAAW,EAAE;EACf,CAAC;EACDnB,OAAO,EAAE,CAAC;AACZ,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}